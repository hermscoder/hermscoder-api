spring.main.banner-mode=off

#Multipart max file size
spring.servlet.multipart.max-file-size=50MB

main.profile.user.email=${sm://MAIN_PROFILE_USER_EMAIL}

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true


#Google Cloud Secret Manager configuration
spring.cloud.gcp.secretmanager.enabled=false


#Prod DB
spring.datasource.url=jdbc:postgresql://34.79.48.74:5432/hermscoder
spring.datasource.username=${sm://SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${sm://SPRING_DATASOURCE_PASSWORD}
spring.jpa.hibernate.ddl-auto=update


#EMAIL SENDING CONFIGURATIONS
default.email.sender=${sm://MAIN_PROFILE_USER_EMAIL}

spring.mail.host=smtp.gmail.com
spring.mail.username=${sm://SPRING_MAIL_USERNAME}
spring.mail.password=${sm://SPRING_MAIL_PASSWORD}

#EMAIL SENDING CONFIGURATIONS
spring.mail.properties.mail.smtp.auth = true
spring.mail.properties.mail.smtp.socketFactory.port = 465
spring.mail.properties.mail.smtp.socketFactory.class = javax.net.ssl.SSLSocketFactory
spring.mail.properties.mail.smtp.socketFactory.fallback = false
spring.mail.properties.mail.smtp.starttls.enable = true
spring.mail.properties.mail.smtp.ssl.enable = true

spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

#LINKEDIN API
linkedin.api.client.id=${sm://LINKEDIN_API_CLIENT_ID}
linkedin.api.client.secret=${sm://LINKEDIN_API_CLIENT_SECRET}

#PEXELS API
pexels.api.key=${sm://PEXELS_API_KEY}

#CLOUDINARY CREDENTIALS
cloud.cloudName=${sm://CLOUDINARY_CLOUD_NAME}
cloud.apiKey=${sm://CLOUDINARY_CLOUD_API_KEY}
cloud.apiSecret=${sm://CLOUDINARY_CLOUD_API_SECRET}
